/*
 * Copyright (c) 2011, Fritz Feuerbacher.
 * Copyright (c) 2014, Fritz Feuerbacher.
 * Copyright (c) 2018, Fritz Feuerbacher.
 */
package com.feuersoft.imanager.ui;

import com.feuersoft.imanager.common.Crypt;
import com.feuersoft.imanager.common.ImanagerProps;
import com.feuersoft.imanager.common.Utils;
import com.feuersoft.imanager.enums.InvoiceState;
import com.feuersoft.imanager.enums.SearchType;
import com.feuersoft.imanager.enums.UserGroup;
import com.feuersoft.imanager.persistence.Associate;
import com.feuersoft.imanager.persistence.BinLocation;
import com.feuersoft.imanager.persistence.Company;
import com.feuersoft.imanager.persistence.Customer;
import com.feuersoft.imanager.persistence.HibernateDataManagerDyn;
import com.feuersoft.imanager.persistence.InetProxy;
import com.feuersoft.imanager.persistence.Invoice;
import com.feuersoft.imanager.persistence.Item;
import com.feuersoft.imanager.persistence.MarketSegment;
import com.feuersoft.imanager.persistence.Preferences;
import com.feuersoft.imanager.persistence.ProductLine;
import com.feuersoft.imanager.persistence.ProductVendor;
import com.feuersoft.imanager.persistence.PurchaseOrder;
import com.feuersoft.imanager.persistence.Store;
import com.feuersoft.imanager.persistence.UnitMeasure;
import com.feuersoft.imanager.ui.worker.BackOrderChartWorker;
import com.feuersoft.imanager.ui.worker.DeleteItemsWorker;
import com.feuersoft.imanager.ui.worker.ImportItemsWorker;
import com.feuersoft.imanager.ui.worker.InventoryLostSalesChartWorker;
import com.feuersoft.imanager.ui.worker.LookupItemWorker;
import com.feuersoft.imanager.ui.worker.NewOrderChartWorker;
import com.feuersoft.imanager.ui.worker.NewOrderWorker;
import com.feuersoft.imanager.ui.worker.OnOrderChartWorker;
import com.feuersoft.imanager.ui.worker.PurchaseOrderWorker;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTabbedPane;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Fritz Feuerbacher
 */
public class InvManagerMainFrame extends javax.swing.JFrame
{
    private static final Logger LOG =
            LoggerFactory.getLogger(InvManagerMainFrame.class);

    transient private final HibernateDataManagerDyn jpa = new HibernateDataManagerDyn();
    private Associate currUser = null;
    MainSplashJPanel mainSplash = new MainSplashJPanel();
    private static CloseableTabbedPane tabbedPane = null;
    private static final String WELCOME_TAB = "iManager";
    private static String lookFeel;
    transient private ImanagerProps imanProps = null;
    
    /** Creates new form InvManagerMainFrame */
    public InvManagerMainFrame()
    {
       initComponents();
       
       imanProps = new ImanagerProps();

       jMenuItemSelectItem.setVisible(false);
       jMenuItemLookupItem.setVisible(false);

       super.setIconImage(Utils.getInvManagerImage());
       InvManagerMainFrame.tabbedPane = (CloseableTabbedPane)jTabbedPaneMain;
       //tabbedPane.setCloseIcons(null, Utils.getCloseIcon(), null);
       tabbedPane.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);
       mainSplash.putClientProperty("isClosable", false);
       tabbedPane.add(WELCOME_TAB, mainSplash);
       super.setDefaultCloseOperation(EXIT_ON_CLOSE);

       jProgressBarMain.setVisible(false);
       
       jLabelWorking.setVisible(false);
       
       jMenuItemLogout.setEnabled(false);
       
       jLabelBusyWaitAnimation.setVisible(false);
       
       // The one and only swing worker consumer that will
       // process user swing requests in a FIFO order.
       (new Thread(new SwingWorkerConsumer())).start();
       LOG.info("iManager launched at: " + Utils.getCurrentDateTime());
       
       loggedout();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPaneMain = new javax.swing.JScrollPane();
    jTabbedPaneMain = new CloseableTabbedPane();
    jPanelStatusBar = new javax.swing.JPanel();
    jLabelWorking = new javax.swing.JLabel();
    jProgressBarMain = new javax.swing.JProgressBar();
    jMenuBarMain = new javax.swing.JMenuBar();
    jMenuApp = new javax.swing.JMenu();
    jMenuItemLogin = new javax.swing.JMenuItem();
    jMenuItemLogout = new javax.swing.JMenuItem();
    jMenuItemExit = new javax.swing.JMenuItem();
    jMenuAdmin = new javax.swing.JMenu();
    jMenuItemConfigureCompany = new javax.swing.JMenuItem();
    jSeparator7 = new javax.swing.JPopupMenu.Separator();
    jMenuItemConfigureProxy = new javax.swing.JMenuItem();
    jSeparator6 = new javax.swing.JPopupMenu.Separator();
    jMenuStore = new javax.swing.JMenu();
    jMenuItemAddStore = new javax.swing.JMenuItem();
    jMenuItemEditStore = new javax.swing.JMenuItem();
    jSeparator9 = new javax.swing.JPopupMenu.Separator();
    jMenuAssociate = new javax.swing.JMenu();
    jMenuItemAddAssociate = new javax.swing.JMenuItem();
    jMenuItemEditAssociate = new javax.swing.JMenuItem();
    jSeparator4 = new javax.swing.JPopupMenu.Separator();
    jMenuCustomer = new javax.swing.JMenu();
    jMenuItemAddCustomer = new javax.swing.JMenuItem();
    jMenuItemEditCustomer = new javax.swing.JMenuItem();
    jMenuItemReceiveOnAccount = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenuProductLine = new javax.swing.JMenu();
    jMenuItemAddProductLine = new javax.swing.JMenuItem();
    jMenuItemEditProductLine = new javax.swing.JMenuItem();
    jSeparator11 = new javax.swing.JPopupMenu.Separator();
    jMenuItemAddMarketSegment = new javax.swing.JMenuItem();
    jMenuItemEditMarketSegment = new javax.swing.JMenuItem();
    jSeparator3 = new javax.swing.JPopupMenu.Separator();
    jMenuVendor = new javax.swing.JMenu();
    jMenuItemAddVendor = new javax.swing.JMenuItem();
    jMenuItemEditVendor = new javax.swing.JMenuItem();
    jSeparator2 = new javax.swing.JPopupMenu.Separator();
    jMenuUnitMeasure = new javax.swing.JMenu();
    jMenuItemAddUnitOfMeasure = new javax.swing.JMenuItem();
    jMenuItemEditUnitOfMeasure = new javax.swing.JMenuItem();
    jSeparator5 = new javax.swing.JPopupMenu.Separator();
    jMenuBin = new javax.swing.JMenu();
    jMenuItemAddBinLocation = new javax.swing.JMenuItem();
    jMenuItemEditBinLocation = new javax.swing.JMenuItem();
    jSeparator8 = new javax.swing.JPopupMenu.Separator();
    jMenuInvManagement = new javax.swing.JMenu();
    jMenuItemImportInventory = new javax.swing.JMenuItem();
    jMenuItemUpdatePrices = new javax.swing.JMenuItem();
    jMenuItemDeleteItem = new javax.swing.JMenuItem();
    jMenuItemDeleteItemsLike = new javax.swing.JMenuItem();
    jMenuCharts = new javax.swing.JMenu();
    jMenuPurchaseOrderCharts = new javax.swing.JMenu();
    jMenuItemNewOrderLines = new javax.swing.JMenuItem();
    jMenuInventoryCharts = new javax.swing.JMenu();
    jMenuItemInventoryBackorderedChart = new javax.swing.JMenuItem();
    jMenuItemInventoryLostSalesChart = new javax.swing.JMenuItem();
    jMenuItemInventoryOnOrderChart = new javax.swing.JMenuItem();
    jMenuInvoice = new javax.swing.JMenu();
    jMenuItemCreateInvoice = new javax.swing.JMenuItem();
    jMenuItemRecallInvoice = new javax.swing.JMenuItem();
    jMenuItem = new javax.swing.JMenu();
    jMenuItemNewItem = new javax.swing.JMenuItem();
    jSeparator10 = new javax.swing.JPopupMenu.Separator();
    jMenuItemSelectItem = new javax.swing.JMenuItem();
    jMenuItemLookupItem = new javax.swing.JMenuItem();
    jMenuItemSearchItemDescription = new javax.swing.JMenuItem();
    jMenuItemSearchItemNumber = new javax.swing.JMenuItem();
    jMenuItemSearchOEMNumber = new javax.swing.JMenuItem();
    jMenuPurchaseOrder = new javax.swing.JMenu();
    jMenuCreatePO = new javax.swing.JMenu();
    jMenuItemCreateNewOrder = new javax.swing.JMenuItem();
    jMenuItemCreatePurchaseOrder = new javax.swing.JMenuItem();
    jMenuReceivePO = new javax.swing.JMenu();
    jMenuItemReceivePOAutomatic = new javax.swing.JMenuItem();
    jMenuItemReceivePOAutomatic.setVisible(false);
    jMenuItemReceivePOManual = new javax.swing.JMenuItem();
    jMenuCancelPO = new javax.swing.JMenuItem();
    jMenuCancelPO.setVisible(false);
    jSeparator12 = new javax.swing.JPopupMenu.Separator();
    jMenuPrintPO = new javax.swing.JMenuItem();
    jMenuReports = new javax.swing.JMenu();
    jMenuHelp = new javax.swing.JMenu();
    jMenuItemAbout = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle(Utils.getApp_Title());

    jScrollPaneMain.setPreferredSize(new Dimension(1000, 600));
    jScrollPaneMain.setViewportView(jTabbedPaneMain);

    jLabelBusyWaitAnimation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spin_gray_32.gif"))); // NOI18N
    jLabelBusyWaitAnimation.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    jLabelBusyWaitAnimation.setInheritsPopupMenu(false);
    jLabelBusyWaitAnimation.setOpaque(true);
    jLabelBusyWaitAnimation.setPreferredSize(new java.awt.Dimension(30, 30));
    jLabelBusyWaitAnimation.setRequestFocusEnabled(false);
    jLabelBusyWaitAnimation.setVerifyInputWhenFocusTarget(false);

    jLabelWorking.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jLabelWorking.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jLabelWorking.setText("Working. . .");
    jLabelWorking.setFocusable(false);
    jLabelWorking.setOpaque(true);
    jLabelWorking.setRequestFocusEnabled(false);
    jLabelWorking.setVerifyInputWhenFocusTarget(false);

    jProgressBarMain.setFocusable(false);
    jProgressBarMain.setRequestFocusEnabled(false);
    jProgressBarMain.setVerifyInputWhenFocusTarget(false);

    javax.swing.GroupLayout jPanelStatusBarLayout = new javax.swing.GroupLayout(jPanelStatusBar);
    jPanelStatusBar.setLayout(jPanelStatusBarLayout);
    jPanelStatusBarLayout.setHorizontalGroup(
      jPanelStatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStatusBarLayout.createSequentialGroup()
        .addGap(7, 7, 7)
        .addComponent(jLabelBusyWaitAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(jLabelWorking, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
        .addComponent(jProgressBarMain, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    jPanelStatusBarLayout.setVerticalGroup(
      jPanelStatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStatusBarLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelStatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jLabelWorking, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
          .addComponent(jProgressBarMain, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabelBusyWaitAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        .addContainerGap())
    );

    jMenuApp.setText("Access");

    jMenuItemLogin.setText("Login");
    jMenuItemLogin.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemLoginActionPerformed(evt);
      }
    });
    jMenuApp.add(jMenuItemLogin);

    jMenuItemLogout.setText("Logout");
    jMenuItemLogout.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemLogoutActionPerformed(evt);
      }
    });
    jMenuApp.add(jMenuItemLogout);

    jMenuItemExit.setText("Exit");
    jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemExitActionPerformed(evt);
      }
    });
    jMenuApp.add(jMenuItemExit);

    jMenuBarMain.add(jMenuApp);

    jMenuAdmin.setText("Admin");
    jMenuAdmin.setEnabled(false);

    jMenuItemConfigureCompany.setText("Configure Company");
    jMenuItemConfigureCompany.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemConfigureCompanyActionPerformed(evt);
      }
    });
    jMenuAdmin.add(jMenuItemConfigureCompany);
    jMenuAdmin.add(jSeparator7);

    jMenuItemConfigureProxy.setText("Configure Proxy");
    jMenuItemConfigureProxy.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemConfigureProxyActionPerformed(evt);
      }
    });
    jMenuAdmin.add(jMenuItemConfigureProxy);
    jMenuAdmin.add(jSeparator6);

    jMenuStore.setText("Store");

    jMenuItemAddStore.setText("Add Store");
    jMenuItemAddStore.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAddStoreActionPerformed(evt);
      }
    });
    jMenuStore.add(jMenuItemAddStore);

    jMenuItemEditStore.setText(" Edit Store");
    jMenuItemEditStore.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemEditStoreActionPerformed(evt);
      }
    });
    jMenuStore.add(jMenuItemEditStore);

    jMenuAdmin.add(jMenuStore);
    jMenuAdmin.add(jSeparator9);

    jMenuAssociate.setText("Associate");

    jMenuItemAddAssociate.setText("Add Associate");
    jMenuItemAddAssociate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAddAssociateActionPerformed(evt);
      }
    });
    jMenuAssociate.add(jMenuItemAddAssociate);

    jMenuItemEditAssociate.setText("Edit Associate");
    jMenuItemEditAssociate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemEditAssociateActionPerformed(evt);
      }
    });
    jMenuAssociate.add(jMenuItemEditAssociate);

    jMenuAdmin.add(jMenuAssociate);
    jMenuAdmin.add(jSeparator4);

    jMenuCustomer.setText("Customer");

    jMenuItemAddCustomer.setText("Add Customer");
    jMenuItemAddCustomer.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAddCustomerActionPerformed(evt);
      }
    });
    jMenuCustomer.add(jMenuItemAddCustomer);

    jMenuItemEditCustomer.setText("Edit Customer");
    jMenuItemEditCustomer.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemEditCustomerActionPerformed(evt);
      }
    });
    jMenuCustomer.add(jMenuItemEditCustomer);

    jMenuItemReceiveOnAccount.setText("Receive on Account");
    jMenuCustomer.add(jMenuItemReceiveOnAccount);

    jMenuAdmin.add(jMenuCustomer);
    jMenuAdmin.add(jSeparator1);

    jMenuProductLine.setText("Product Line");

    jMenuItemAddProductLine.setText("Add Product Line");
    jMenuItemAddProductLine.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAddProductLineActionPerformed(evt);
      }
    });
    jMenuProductLine.add(jMenuItemAddProductLine);

    jMenuItemEditProductLine.setText("Edit Product Line");
    jMenuItemEditProductLine.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemEditProductLineActionPerformed(evt);
      }
    });
    jMenuProductLine.add(jMenuItemEditProductLine);
    jMenuProductLine.add(jSeparator11);

    jMenuItemAddMarketSegment.setText("Add Market Segment");
    jMenuItemAddMarketSegment.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAddMarketSegmentActionPerformed(evt);
      }
    });
    jMenuProductLine.add(jMenuItemAddMarketSegment);

    jMenuItemEditMarketSegment.setText("Edit Market Segment");
    jMenuItemEditMarketSegment.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemEditMarketSegmentActionPerformed(evt);
      }
    });
    jMenuProductLine.add(jMenuItemEditMarketSegment);

    jMenuAdmin.add(jMenuProductLine);
    jMenuAdmin.add(jSeparator3);

    jMenuVendor.setText("Vendor");

    jMenuItemAddVendor.setText("Add Vendor");
    jMenuItemAddVendor.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAddVendorActionPerformed(evt);
      }
    });
    jMenuVendor.add(jMenuItemAddVendor);

    jMenuItemEditVendor.setText("Edit Vendor");
    jMenuItemEditVendor.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemEditVendorActionPerformed(evt);
      }
    });
    jMenuVendor.add(jMenuItemEditVendor);

    jMenuAdmin.add(jMenuVendor);
    jMenuAdmin.add(jSeparator2);

    jMenuUnitMeasure.setText("Unit of Measure");

    jMenuItemAddUnitOfMeasure.setText("Add Unit of Measure");
    jMenuItemAddUnitOfMeasure.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAddUnitOfMeasureActionPerformed(evt);
      }
    });
    jMenuUnitMeasure.add(jMenuItemAddUnitOfMeasure);

    jMenuItemEditUnitOfMeasure.setText("Edit Unit of Measure");
    jMenuItemEditUnitOfMeasure.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemEditUnitOfMeasureActionPerformed(evt);
      }
    });
    jMenuUnitMeasure.add(jMenuItemEditUnitOfMeasure);

    jMenuAdmin.add(jMenuUnitMeasure);
    jMenuAdmin.add(jSeparator5);

    jMenuBin.setText("Bin Location");

    jMenuItemAddBinLocation.setText("Add Bin Location");
    jMenuItemAddBinLocation.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAddBinLocationActionPerformed(evt);
      }
    });
    jMenuBin.add(jMenuItemAddBinLocation);

    jMenuItemEditBinLocation.setText("Edit Bin Location");
    jMenuItemEditBinLocation.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemEditBinLocationActionPerformed(evt);
      }
    });
    jMenuBin.add(jMenuItemEditBinLocation);

    jMenuAdmin.add(jMenuBin);
    jMenuAdmin.add(jSeparator8);

    jMenuInvManagement.setText("Inventory Import");

    jMenuItemImportInventory.setText("Import Inventory");
    jMenuItemImportInventory.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemImportInventoryActionPerformed(evt);
      }
    });
    jMenuInvManagement.add(jMenuItemImportInventory);

    jMenuItemUpdatePrices.setText("Update Prices");
    jMenuItemUpdatePrices.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemUpdatePricesActionPerformed(evt);
      }
    });
    jMenuInvManagement.add(jMenuItemUpdatePrices);

    jMenuItemDeleteItem.setText("Delete Item(s)");
    jMenuItemDeleteItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemDeleteItemActionPerformed(evt);
      }
    });
    jMenuInvManagement.add(jMenuItemDeleteItem);

    jMenuItemDeleteItemsLike.setText("Delete Items Like");
    jMenuItemDeleteItemsLike.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemDeleteItemsLikeActionPerformed(evt);
      }
    });
    jMenuInvManagement.add(jMenuItemDeleteItemsLike);

    jMenuAdmin.add(jMenuInvManagement);

    jMenuBarMain.add(jMenuAdmin);

    jMenuCharts.setText("Charts");
    jMenuCharts.setEnabled(false);

    jMenuPurchaseOrderCharts.setText("Purchase Orders");

    jMenuItemNewOrderLines.setText("New Order Qty/Lines");
    jMenuItemNewOrderLines.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemNewOrderLinesActionPerformed(evt);
      }
    });
    jMenuPurchaseOrderCharts.add(jMenuItemNewOrderLines);

    jMenuCharts.add(jMenuPurchaseOrderCharts);

    jMenuInventoryCharts.setText("Inventory");

    jMenuItemInventoryBackorderedChart.setText("Backordered");
    jMenuItemInventoryBackorderedChart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemInventoryBackorderedChartActionPerformed(evt);
      }
    });
    jMenuInventoryCharts.add(jMenuItemInventoryBackorderedChart);

    jMenuItemInventoryLostSalesChart.setText("Lost Sales");
    jMenuItemInventoryLostSalesChart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemInventoryLostSalesChartActionPerformed(evt);
      }
    });
    jMenuInventoryCharts.add(jMenuItemInventoryLostSalesChart);

    jMenuItemInventoryOnOrderChart.setText("On Order");
    jMenuItemInventoryOnOrderChart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemInventoryOnOrderChartActionPerformed(evt);
      }
    });
    jMenuInventoryCharts.add(jMenuItemInventoryOnOrderChart);

    jMenuCharts.add(jMenuInventoryCharts);

    jMenuBarMain.add(jMenuCharts);

    jMenuInvoice.setText("Invoice");
    jMenuInvoice.setEnabled(false);

    jMenuItemCreateInvoice.setText("Create");
    jMenuItemCreateInvoice.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemCreateInvoiceActionPerformed(evt);
      }
    });
    jMenuInvoice.add(jMenuItemCreateInvoice);

    jMenuItemRecallInvoice.setText("Recall");
    jMenuItemRecallInvoice.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemRecallInvoiceActionPerformed(evt);
      }
    });
    jMenuInvoice.add(jMenuItemRecallInvoice);

    jMenuBarMain.add(jMenuInvoice);

    jMenuItem.setText("Item");
    jMenuItem.setEnabled(false);

    jMenuItemNewItem.setText("Create New Item");
    jMenuItemNewItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemNewItemActionPerformed(evt);
      }
    });
    jMenuItem.add(jMenuItemNewItem);
    jMenuItem.add(jSeparator10);

    jMenuItemSelectItem.setText("Select Item");
    jMenuItemSelectItem.setToolTipText("Select from a list of item numbers");
    jMenuItemSelectItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemSelectItemActionPerformed(evt);
      }
    });
    jMenuItem.add(jMenuItemSelectItem);

    jMenuItemLookupItem.setText("Lookup Item Number");
    jMenuItemLookupItem.setToolTipText("Enter the full item number");
    jMenuItemLookupItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemLookupItemActionPerformed(evt);
      }
    });
    jMenuItem.add(jMenuItemLookupItem);

    jMenuItemSearchItemDescription.setText("Search Description");
    jMenuItemSearchItemDescription.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemSearchItemDescriptionActionPerformed(evt);
      }
    });
    jMenuItem.add(jMenuItemSearchItemDescription);

    jMenuItemSearchItemNumber.setText("Search Item Number");
    jMenuItemSearchItemNumber.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemSearchItemNumberActionPerformed(evt);
      }
    });
    jMenuItem.add(jMenuItemSearchItemNumber);

    jMenuItemSearchOEMNumber.setText("Search OEM Number");
    jMenuItemSearchOEMNumber.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemSearchOEMNumberActionPerformed(evt);
      }
    });
    jMenuItem.add(jMenuItemSearchOEMNumber);

    jMenuBarMain.add(jMenuItem);

    jMenuPurchaseOrder.setText("Purchase Order");
    jMenuPurchaseOrder.setEnabled(false);

    jMenuCreatePO.setText("Create");

    jMenuItemCreateNewOrder.setText("New Order");
    jMenuItemCreateNewOrder.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemCreateNewOrderActionPerformed(evt);
      }
    });
    jMenuCreatePO.add(jMenuItemCreateNewOrder);

    jMenuItemCreatePurchaseOrder.setText("Create PO");
    jMenuItemCreatePurchaseOrder.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemCreatePurchaseOrderActionPerformed(evt);
      }
    });
    jMenuCreatePO.add(jMenuItemCreatePurchaseOrder);

    jMenuPurchaseOrder.add(jMenuCreatePO);

    jMenuReceivePO.setText("Receive");

    jMenuItemReceivePOAutomatic.setText("Receive Automatic");
    jMenuItemReceivePOAutomatic.setEnabled(false);
    jMenuReceivePO.add(jMenuItemReceivePOAutomatic);

    jMenuItemReceivePOManual.setText("Receive PO");
    jMenuItemReceivePOManual.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemReceivePOManualActionPerformed(evt);
      }
    });
    jMenuReceivePO.add(jMenuItemReceivePOManual);

    jMenuPurchaseOrder.add(jMenuReceivePO);

    jMenuCancelPO.setText("Cancel");
    jMenuCancelPO.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuCancelPOActionPerformed(evt);
      }
    });
    jMenuPurchaseOrder.add(jMenuCancelPO);
    jMenuPurchaseOrder.add(jSeparator12);

    jMenuPrintPO.setText("Print PO");
    jMenuPrintPO.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuPrintPOActionPerformed(evt);
      }
    });
    jMenuPurchaseOrder.add(jMenuPrintPO);

    jMenuBarMain.add(jMenuPurchaseOrder);

    jMenuReports.setText("Reports");
    jMenuReports.setEnabled(false);
    jMenuBarMain.add(jMenuReports);

    jMenuHelp.setText("Help");

    jMenuItemAbout.setText("About...");
    jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItemAboutActionPerformed(evt);
      }
    });
    jMenuHelp.add(jMenuItemAbout);

    jMenuBarMain.add(jMenuHelp);

    setJMenuBar(jMenuBarMain);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPaneMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanelStatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jScrollPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jPanelStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
      LOG.info("iManager exited at: " + Utils.getCurrentDateTime());
      System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoginActionPerformed

      InvManagerLoginJPanel loginPanel = new InvManagerLoginJPanel();
      boolean doLogin = true;

      if (Utils.useLoginAccess)
      {
         Object[] options = { "Login", "Cancel" };
         int answer = JOptionPane.showOptionDialog(this, loginPanel,
                              InvManagerLoginJPanel.DISPLAY_NAME,
                              JOptionPane.OK_CANCEL_OPTION,
                              JOptionPane.PLAIN_MESSAGE,
                              imanProps.getDialogLogo(),
                              options,
                              loginPanel.getDefaultControl());

         if (answer != JOptionPane.OK_OPTION)
         {
           doLogin = false;
         }
      }
      else
      {
         loginPanel.setUserName(Utils.ADMIN_NAME);
         loginPanel.setPassword(Utils.ADMIN_PWD);        
      }
      
     if (doLogin && !loginPanel.getLoginName().isEmpty() && !loginPanel.getPassword().isEmpty())
     { 
       LOG.info("Login attempt by user: " + loginPanel.getLoginName() + " at: " + Utils.getCurrentDateTime());
       LoginWorker liw = new LoginWorker(loginPanel.getLoginName(), loginPanel.getPassword());
       Utils.SWING_WORKER_QUE.offer(liw);
     }      
  
    }//GEN-LAST:event_jMenuItemLoginActionPerformed

    private void jMenuItemLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLogoutActionPerformed
      loggedout();
      LOG.info("Logged out at: " + Utils.getCurrentDateTime());
      setBusySpinner(false);
      setWorkingStatus(false, null);      
    }//GEN-LAST:event_jMenuItemLogoutActionPerformed

    private void jMenuItemAddAssociateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddAssociateActionPerformed
         AddUserJPanel adduser = new AddUserJPanel();
         int answer = JOptionPane.showConfirmDialog(this, adduser,
                            AddUserJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

         if (answer == JOptionPane.OK_OPTION)
         {
           Associate newUser = new Associate();
           saveEditedUser(adduser, newUser, true);
           evaluateMenuControls();
         }
    }//GEN-LAST:event_jMenuItemAddAssociateActionPerformed

    private void jMenuItemEditAssociateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditAssociateActionPerformed
         SelectUserJPanel selectUser = new SelectUserJPanel();
         int answer = JOptionPane.showConfirmDialog(this, selectUser,
                            SelectUserJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

         if (answer == JOptionPane.OK_OPTION)
         {
           Associate user = selectUser.getUser();
           if (user.equals(currUser))
           {
             user = currUser;
           }
           AddUserJPanel editUser = new AddUserJPanel(user, true);
           answer = JOptionPane.showConfirmDialog(this, editUser,
                           AddUserJPanel.DISPLAY_NAME,
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE,
                           imanProps.getDialogLogo());

           if (answer == JOptionPane.OK_OPTION)
           {
             saveEditedUser(editUser, user, false);
           }
         }
    }//GEN-LAST:event_jMenuItemEditAssociateActionPerformed

    private void jMenuItemAddProductLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddProductLineActionPerformed

      if (!jpa.getAllProductVendors().isEmpty())
      {
        EditProductLineJPanel addProductLine = new EditProductLineJPanel();
        int answer = JOptionPane.showConfirmDialog(this, addProductLine,
                            EditProductLineJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          if (!addProductLine.getProductLineName().isEmpty())
          {
            ProductLine newLine = new ProductLine();
            newLine.setDescription(addProductLine.getDescription());
            newLine.setLastPhysicalInventory(addProductLine.getLastPhysical());
            newLine.setLineCode(addProductLine.getProductLineCode());
            newLine.setProductLineName(addProductLine.getProductLineName());
            newLine.setPriceEffectiveDate(addProductLine.getPriceEffective());
            newLine.setLastYearSales(addProductLine.getLastYearSales());
            newLine.setVendor(addProductLine.getPrimaryProductVendor());
            newLine.setYearToDateSales(addProductLine.getYearToDateSales());
            newLine.setMarketSegment(addProductLine.getMarketSegment());
            newLine.setMarketPosition(addProductLine.getMarketPosition());
            newLine.setDefaultPriceLevel(addProductLine.getSellPriceField());
            
            // We must check to see if the vendor already has a product line
            // with this product line code.  If so, we must reject it because
            // each product line code must be unique per vendor.
            ProductLine plTest = jpa.getProductLine(addProductLine.getProductLineCode(),
                                                    addProductLine.getPrimaryProductVendor());
            if (null == plTest)
            {
              jpa.save(newLine, newLine.getId());
              evaluateMenuControls();
            }
            else
            {
              Utils.showPopMessage(this, "Product Line: " + addProductLine.getProductLineCode() +
                " already exists for vendor: " + addProductLine.getPrimaryProductVendor().getProductVendorName());
            }
          }
          else
          {
            Utils.showPopMessage(this, "Product Line name is blank.  Line not saved!");
          }
        }
      }
      else
      {
         Utils.showPopMessage(this, "You must have a vendor first!");
      }

    }//GEN-LAST:event_jMenuItemAddProductLineActionPerformed

    private void jMenuItemEditProductLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditProductLineActionPerformed

      String issue = "";
      boolean shouldEdit = true;

      if (jpa.getAllProductVendors().isEmpty())
      {
        issue = "No vendors found!";
        shouldEdit = false;
      }
      else
      if (jpa.getAllProductLines().isEmpty())
      {
        issue = "No product lines found!";
        shouldEdit = false;
      }

      if (shouldEdit)
      {
        SelectProductLineJPanel selectProdLine = new SelectProductLineJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selectProdLine,
                              SelectProductLineJPanel.TITLE_NAME,
                              JOptionPane.OK_CANCEL_OPTION,
                              JOptionPane.PLAIN_MESSAGE,
                              imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          ProductLine line = selectProdLine.getProductLine();
          EditProductLineJPanel editLine = new EditProductLineJPanel(line);
          answer = JOptionPane.showConfirmDialog(this, editLine,
                             EditProductLineJPanel.DISPLAY_NAME,
                             JOptionPane.OK_CANCEL_OPTION,
                             JOptionPane.PLAIN_MESSAGE,
                             imanProps.getDialogLogo());

          if (answer == JOptionPane.OK_OPTION)
          {
            if (!editLine.getProductLineName().isEmpty())
            {
              line.setDescription(editLine.getDescription());
              line.setLastPhysicalInventory(editLine.getLastPhysical());
              line.setLineCode(editLine.getProductLineCode());
              line.setProductLineName(editLine.getProductLineName());
              line.setPriceEffectiveDate(editLine.getPriceEffective());
              line.setLastYearSales(editLine.getLastYearSales());
              line.setVendor(editLine.getPrimaryProductVendor());
              line.setYearToDateSales(editLine.getYearToDateSales());
              line.setMarketSegment(editLine.getMarketSegment());
              line.setMarketPosition(editLine.getMarketPosition());
              line.setDefaultPriceLevel(editLine.getSellPriceField());
              jpa.save(line, line.getId());
            }
            else
            {
              Utils.showPopMessage(this, "Product line is blank.  Line not saved!");
            }
          }
        }
      }
      else
      {
        Utils.showPopMessage(this, issue);
      }
    }//GEN-LAST:event_jMenuItemEditProductLineActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
            JOptionPane.showMessageDialog(this, Utils.getABOUT_BOX(),
                                      "About " + Utils.APP_TITLE,
                                      JOptionPane.INFORMATION_MESSAGE,
                                      Utils.getFeuerSoftIcon());
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItemNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewItemActionPerformed

      if (currUser.isActive() && (currUser.getUsergroup() == UserGroup.MANAGEMENT ||
                                  currUser.getUsergroup() == UserGroup.ADMIN)     &&
          !jpa.getAllProductLines().isEmpty() && !jpa.getAllStores().isEmpty())
      {
        Item item = new Item();
        EditItemJPanel itemPanel = new EditItemJPanel(item, currUser, tabbedPane, null);
        tabbedPane.add("New Item", itemPanel);
        tabbedPane.setSelectedComponent(itemPanel);
      }
      else
      {
        StringBuilder sb = new StringBuilder();
        sb.append("Unable to create new item.").append("\n");
        sb.append("Make sure you have created a store and a product line.");
        Utils.showPopMessage(this, sb.toString());
        LOG.error(sb.toString());
      }
    }//GEN-LAST:event_jMenuItemNewItemActionPerformed

    private void jMenuItemSelectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectItemActionPerformed

         ItemSelectFromComboJPanel selectItem = new ItemSelectFromComboJPanel();
         int answer = JOptionPane.showConfirmDialog(this, selectItem,
                            ItemSelectFromComboJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

         if (answer == JOptionPane.OK_OPTION)
         {
           Item item = selectItem.getInventoryItem();
           if (null != item)
           {
             EditItemJPanel itemPanel =
                     new EditItemJPanel(item, currUser, tabbedPane, null);
             tabbedPane.add(item.getItemNumber(), itemPanel);
             tabbedPane.setSelectedComponent(itemPanel);
           }
         }
    }//GEN-LAST:event_jMenuItemSelectItemActionPerformed

    private void jMenuItemAddVendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddVendorActionPerformed

      EditProductVendorJPanel addProductVendor = new EditProductVendorJPanel();
      int answer = JOptionPane.showConfirmDialog(this, addProductVendor,
                          EditProductVendorJPanel.DISPLAY_NAME,
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

      if (answer == JOptionPane.OK_OPTION)
      {
        if (!addProductVendor.getVendorName().isEmpty()
                && !addProductVendor.getAccountNumber().isEmpty())
        {
          
          List<ProductVendor> vendors = jpa.getVendors(addProductVendor.getAccountNumber());
          
          if (!vendors.isEmpty())
          {
            Utils.showPopMessage(this, "Note: vendor account number already exists!");
          }
          ProductVendor vendor = new ProductVendor();
          vendor.setAccountNumber(addProductVendor.getAccountNumber());
          vendor.setStreetAddress(addProductVendor.getAddress());
          vendor.setCity(addProductVendor.getCity());
          vendor.setContactEmail(addProductVendor.getContactEmail());
          vendor.setContactName(addProductVendor.getContactName());
          vendor.setCountry(addProductVendor.getCountry());
          vendor.setDescription(addProductVendor.getDescription());
          vendor.setDiscountPercent(addProductVendor.getDiscountPercent());
          vendor.setFaxNumber(addProductVendor.getFaxNumber());
          vendor.setMinimumForDiscount(addProductVendor.getMinimumForDiscount());
          vendor.setMinimumForShipping(addProductVendor.getMinimumForShipping());
          vendor.setProductVendorName(addProductVendor.getVendorName());
          vendor.setPaymentTerms(addProductVendor.getPaymentTerms());
          vendor.setPhoneNumber(addProductVendor.getPhoneNumber());
          vendor.setStateOrProvince(addProductVendor.getState());
          vendor.setTotalLastYear(addProductVendor.getLastYearsSales());
          vendor.setTotalThisYear(addProductVendor.getYearToDateSales());
          vendor.setUpdateddate(new Date());
          vendor.setZipCode(addProductVendor.getZip());
          jpa.save(vendor, vendor.getId());
          Utils.showPopMessage(this, "Vendor saved.");
          evaluateMenuControls();
        }
        else
        {
          Utils.showPopMessage(this, "Vendor name or account is blank.  Not saved!");
        }
      }
    }//GEN-LAST:event_jMenuItemAddVendorActionPerformed

    private void jMenuItemEditVendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditVendorActionPerformed

      if (!jpa.getAllProductVendors().isEmpty())
      {
        SelectProductVendorJPanel selectProdVendor = new SelectProductVendorJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selectProdVendor,
                            SelectProductVendorJPanel.TITLE_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          ProductVendor vendor = selectProdVendor.getProductVendor();
          EditProductVendorJPanel editVendor = new EditProductVendorJPanel(vendor);
          answer = JOptionPane.showConfirmDialog(this, editVendor,
                           EditProductLineJPanel.DISPLAY_NAME,
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE,
                           imanProps.getDialogLogo());

          if (answer == JOptionPane.OK_OPTION)
          {
            if (!editVendor.getVendorName().isEmpty()
                    && !editVendor.getAccountNumber().isEmpty())
            {
              vendor.setAccountNumber(editVendor.getAccountNumber());
              vendor.setStreetAddress(editVendor.getAddress());
              vendor.setCity(editVendor.getCity());
              vendor.setContactEmail(editVendor.getContactEmail());
              vendor.setContactName(editVendor.getContactName());
              vendor.setCountry(editVendor.getCountry());
              vendor.setDescription(editVendor.getDescription());
              vendor.setDiscountPercent(editVendor.getDiscountPercent());
              vendor.setFaxNumber(editVendor.getFaxNumber());
              vendor.setMinimumForDiscount(editVendor.getMinimumForDiscount());
              vendor.setMinimumForShipping(editVendor.getMinimumForShipping());
              vendor.setProductVendorName(editVendor.getVendorName());
              vendor.setPaymentTerms(editVendor.getPaymentTerms());
              vendor.setPhoneNumber(editVendor.getPhoneNumber());
              vendor.setStateOrProvince(editVendor.getState());
              vendor.setTotalLastYear(editVendor.getLastYearsSales());
              vendor.setTotalThisYear(editVendor.getYearToDateSales());
              vendor.setUpdateddate(new Date());
              vendor.setZipCode(editVendor.getZip());
              jpa.save(vendor, vendor.getId());
              Utils.showPopMessage(this, "Vendor saved.");
            }
            else
            {
              Utils.showPopMessage(this, "Vendor name is blank.  Not saved!");
            }
          }
        }
       }
       else
       {
         Utils.showPopMessage(this, "No vendors exist!");
       }
    }//GEN-LAST:event_jMenuItemEditVendorActionPerformed

    private void jMenuItemLookupItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLookupItemActionPerformed

         LookupItemJPanel lookupItem = new LookupItemJPanel();
         int answer = JOptionPane.showConfirmDialog(this, lookupItem,
                            LookupItemJPanel.DISPLAY_TITLE,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

         if (answer == JOptionPane.OK_OPTION)
         {
           List<Item> itemList = jpa.getItem(lookupItem.getItemNumber());
           if (!itemList.isEmpty())
           {
             if (itemList.size() == 1)
             {
               Item tmpItem = itemList.get(0);
               EditItemJPanel itemPanel =
                      new EditItemJPanel(tmpItem, currUser, tabbedPane, null);
               tabbedPane.add(tmpItem.getItemNumber(), itemPanel);
               tabbedPane.setSelectedComponent(itemPanel);
             }
             else
             {
               List<ProductLine> plList = new ArrayList<>();
               for (Item i : itemList)
               {
                 plList.add(i.getProductLine());
               }
               SelectProductLineJPanel selectProdLine =
                                       new SelectProductLineJPanel(plList);
               answer = JOptionPane.showConfirmDialog(this, selectProdLine,
                              SelectProductLineJPanel.TITLE_NAME,
                              JOptionPane.OK_CANCEL_OPTION,
                              JOptionPane.PLAIN_MESSAGE,
                              imanProps.getDialogLogo());

               if (answer == JOptionPane.OK_OPTION)
               {
                 ProductLine line = selectProdLine.getProductLine();
                 Item tmpItem = jpa.getItem(lookupItem.getItemNumber(), line);
                 if (null != tmpItem)
                 {
                   EditItemJPanel itemPanel =
                       new EditItemJPanel(tmpItem, currUser, tabbedPane, null);
                   tabbedPane.add(tmpItem.getItemNumber(), itemPanel);
                   tabbedPane.setSelectedComponent(itemPanel);
                 }
               }
               else
               {
                 Utils.showPopMessage(this, "Item not found.");
               }
             }
           }
           else
           {
             Utils.showPopMessage(this, "Item not found.");
           }
         }
    }//GEN-LAST:event_jMenuItemLookupItemActionPerformed

    private void jMenuItemAddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddCustomerActionPerformed

      EditCustomerJPanel addCustomer = new EditCustomerJPanel();
      int answer = JOptionPane.showConfirmDialog(this, addCustomer,
                          EditCustomerJPanel.DISPLAY_NAME,
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

      if (answer == JOptionPane.OK_OPTION)
      {
        // TODO: Implement a JDialog so we can check that the
        // the customer account number is created at the time
        // the initail customer record is created.
        if (!addCustomer.getCustomerName().isEmpty()
             && !addCustomer.getAccountNumber().isEmpty())
        {          
          Customer customer = jpa.getCustomer(addCustomer.getAccountNumber());
          
          if (customer == null)
          {
            customer = new Customer();
            customer.setAccountNumber(addCustomer.getAccountNumber());
            customer.setStreetAddress(addCustomer.getAddress());
            customer.setCity(addCustomer.getCity());
            customer.setContactEmail(addCustomer.getContactEmail());
            customer.setContactName(addCustomer.getContactName());
            customer.setCountry(addCustomer.getCountry());
            customer.setDiscountPercent(addCustomer.getDiscountPercent());
            customer.setFaxNumber(addCustomer.getFaxNumber());
            customer.setMinimumForDiscount(addCustomer.getMinimumForDiscount());
            customer.setCustomerName(addCustomer.getCustomerName());
            customer.setPaymentTerms(addCustomer.getPaymentTerms());
            customer.setPhoneNumber(addCustomer.getPhoneNumber());
            customer.setStateOrProvince(addCustomer.getState());
            customer.setTotalLastYear(addCustomer.getLastYearsSales());
            customer.setTotalThisYear(addCustomer.getYearToDateSales());
            customer.setZipCode(addCustomer.getZip());
            customer.setPriceMatrix(addCustomer.getPriceMatrix());
            customer.setCurrentAmount(addCustomer.getCurrentOwed());
            customer.setNinetyDays(addCustomer.getNinetyDays());
            customer.setSixtyDays(addCustomer.getSixtyDays());
            customer.setThirtyDays(addCustomer.getThirtyDays());
            customer.setFaultyReturns(addCustomer.getFaultyReturns());
            customer.setTaxed(addCustomer.isTaxed());
            customer.setOnHold(addCustomer.isOnHold());
            jpa.save(customer, customer.getId());
            evaluateMenuControls();
          }
          else
          {
            Utils.showPopMessage(this, "Customer account number already exists. Not saved!");
          }
        }
        else
        {
          Utils.showPopMessage(this, "Customer name or account number is blank.  Not saved!");
        }
      }

    }//GEN-LAST:event_jMenuItemAddCustomerActionPerformed

    private void jMenuItemEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditCustomerActionPerformed
      if (!jpa.getAllCustomers().isEmpty())
      {
        SelectCustomerJPanel selectCustomer = new SelectCustomerJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selectCustomer,
                            SelectCustomerJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          Customer customer = selectCustomer.getCustomer();
          EditCustomerJPanel editCustomer = new EditCustomerJPanel(customer);
          answer = JOptionPane.showConfirmDialog(this, editCustomer,
                           EditCustomerJPanel.DISPLAY_NAME,
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE,
                           imanProps.getDialogLogo());

          if (answer == JOptionPane.OK_OPTION)
          {
            if (!editCustomer.getCustomerName().isEmpty() &&
                !editCustomer.getAccountNumber().isEmpty())
            {
              Customer customerCheck = jpa.getCustomer(editCustomer.getAccountNumber());
          
              // If the user has changed the account number, we need to alert the
              // user that another account already has that account number.
              if (customerCheck == null 
                   || customer.getId().equals(customerCheck.getId()))
              {
                customer.setAccountNumber(editCustomer.getAccountNumber());
                customer.setStreetAddress(editCustomer.getAddress());
                customer.setCity(editCustomer.getCity());
                customer.setContactEmail(editCustomer.getContactEmail());
                customer.setContactName(editCustomer.getContactName());
                customer.setCountry(editCustomer.getCountry());
                customer.setDiscountPercent(editCustomer.getDiscountPercent());
                customer.setFaxNumber(editCustomer.getFaxNumber());
                customer.setMinimumForDiscount(editCustomer.getMinimumForDiscount());
                customer.setCustomerName(editCustomer.getCustomerName());
                customer.setPaymentTerms(editCustomer.getPaymentTerms());
                customer.setPhoneNumber(editCustomer.getPhoneNumber());
                customer.setStateOrProvince(editCustomer.getState());
                customer.setTotalLastYear(editCustomer.getLastYearsSales());
                customer.setTotalThisYear(editCustomer.getYearToDateSales());
                customer.setZipCode(editCustomer.getZip());
                customer.setPriceMatrix(editCustomer.getPriceMatrix());
                customer.setCurrentAmount(editCustomer.getCurrentOwed());
                customer.setNinetyDays(editCustomer.getNinetyDays());
                customer.setSixtyDays(editCustomer.getSixtyDays());
                customer.setThirtyDays(editCustomer.getThirtyDays());
                customer.setFaultyReturns(editCustomer.getFaultyReturns());
                customer.setTaxed(editCustomer.isTaxed());
                customer.setOnHold(editCustomer.isOnHold());
                customer.setPriceMatrix(editCustomer.getPriceMatrix());
                jpa.save(customer, customer.getId());
              }
              else
              {
                Utils.showPopMessage(this, "Customer account already exists.  Not saved!");
              }
            }
            else
            {
              Utils.showPopMessage(this, "Customer name or account number is blank.  Not saved!");
            }
          }
        }
       }
       else
       {
         Utils.showPopMessage(this, "No customers exist!");
       }
    }//GEN-LAST:event_jMenuItemEditCustomerActionPerformed

    private void jMenuItemAddUnitOfMeasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddUnitOfMeasureActionPerformed

      EditUnitOfMeasureJPanel addUofMeasure = new EditUnitOfMeasureJPanel();
      int answer = JOptionPane.showConfirmDialog(this, addUofMeasure,
                          EditUnitOfMeasureJPanel.DISPLAY_NAME,
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

      if (answer == JOptionPane.OK_OPTION)
      {
        if (!addUofMeasure.getUnitOfMeasureName().isEmpty() &&
            null == jpa.getUnitMeasure(addUofMeasure.getUnitOfMeasureName()) &&
            null == jpa.getUnitMeasureAbbr(addUofMeasure.getUnitOfMeasureAbbr()))
        {
          UnitMeasure unitMeasure = new UnitMeasure(addUofMeasure.getUnitOfMeasureName(),
                                              addUofMeasure.getUnitOfMeasureAbbr());
          unitMeasure.setUnitMeasureDescription(addUofMeasure.getUnitOfMeasureDescription());
          jpa.save(unitMeasure, unitMeasure.getId());
        }
        else
        {
          Utils.showPopMessage(this, "Unit of measure is either blank or already exists!");
        }
      }
    }//GEN-LAST:event_jMenuItemAddUnitOfMeasureActionPerformed

    private void jMenuItemEditUnitOfMeasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditUnitOfMeasureActionPerformed

      if (!jpa.getAllUnitMeasures().isEmpty())
      {
        SelectUnitMeasureJPanel selectMeasure = new SelectUnitMeasureJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selectMeasure,
                            SelectUnitMeasureJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          UnitMeasure unit = selectMeasure.getUnitMeasure();
          EditUnitOfMeasureJPanel editMeasure = new EditUnitOfMeasureJPanel(unit.getUnitMeasureName(),
                                                                            unit.getUmAbbreviation(),
                                                                            unit.getUnitMeasureDescription());
          answer = JOptionPane.showConfirmDialog(this, editMeasure,
                           EditUnitOfMeasureJPanel.DISPLAY_NAME,
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE,
                           imanProps.getDialogLogo());

          if (answer == JOptionPane.OK_OPTION)
          {
            if (!editMeasure.getUnitOfMeasureName().isEmpty())
            {
              unit.setUmAbbreviation(editMeasure.getUnitOfMeasureAbbr());
              unit.setUnitMeasureDescription(editMeasure.getUnitOfMeasureDescription());
              unit.setUnitMeasureName(editMeasure.getUnitOfMeasureName());
              jpa.save(unit, unit.getId());
            }
            else
            {
              Utils.showPopMessage(this, "Unit measure is blank!");
            }
          }
        }
      }
      else
      {
        Utils.showPopMessage(this, "No units of measure exist!");
      }
    }//GEN-LAST:event_jMenuItemEditUnitOfMeasureActionPerformed

    private void jMenuItemAddBinLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddBinLocationActionPerformed

      EditBinLocationJPanel addBinLoc = new EditBinLocationJPanel();
      int answer = JOptionPane.showConfirmDialog(this, addBinLoc,
                          EditBinLocationJPanel.DISPLAY_NAME,
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

      if (answer == JOptionPane.OK_OPTION)
      {
        if (!addBinLoc.getBinLocation().isEmpty() &&
            null == jpa.getBinLocation(addBinLoc.getBinLocation()))
        {
          BinLocation binLoc = new BinLocation(addBinLoc.getBinLocation());
          jpa.save(binLoc, binLoc.getId());
        }
        else
        {
          Utils.showPopMessage(this, "Bin location is either blank or already exists!");
        }
      }
    }//GEN-LAST:event_jMenuItemAddBinLocationActionPerformed

    private void jMenuItemEditBinLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditBinLocationActionPerformed

      if (!jpa.getAllBinLocations().isEmpty())
      {
        SelectBinLocationJPanel selectBinLoc = new SelectBinLocationJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selectBinLoc ,
                            SelectBinLocationJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          BinLocation binLoc = selectBinLoc.getBinLocation();
          EditBinLocationJPanel editBinLoc = new EditBinLocationJPanel(binLoc.getBinLocation());

          answer = JOptionPane.showConfirmDialog(this, editBinLoc,
                           EditBinLocationJPanel.DISPLAY_NAME,
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE,
                           imanProps.getDialogLogo());

          if (answer == JOptionPane.OK_OPTION)
          {
            if (!editBinLoc.getBinLocation().isEmpty())
            {
              binLoc.setBinLocation(editBinLoc.getBinLocation());
              jpa.save(binLoc, binLoc.getId());
            }
            else
            {
              Utils.showPopMessage(this, "Bin location is blank!");
            }
          }
        }
      }
      else
      {
        Utils.showPopMessage(this, "No bin locations exist!");
      }
    }//GEN-LAST:event_jMenuItemEditBinLocationActionPerformed

    private void jMenuItemImportInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemImportInventoryActionPerformed
      if (!jpa.getAllProductLines().isEmpty() && !jpa.getAllStores().isEmpty())
      {
        SelectProductLineAndStoreJPanel selectProdLine = new SelectProductLineAndStoreJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selectProdLine,
                              SelectProductLineAndStoreJPanel.TITLE_NAME,
                              JOptionPane.OK_CANCEL_OPTION,
                              JOptionPane.PLAIN_MESSAGE,
                              imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          Preferences prefs = jpa.getPreferences();
          ProductLine line = selectProdLine.getProductLine();
          Store store = selectProdLine.getStore();
          JFileChooser fileChooser = new JFileChooser(prefs.getImportFileDirectory());
          FileNameExtensionFilter extFilter =
                  new FileNameExtensionFilter("CSV Files", "csv", "csv");
          fileChooser.setFileFilter(extFilter);

          int retVal = fileChooser.showOpenDialog(this);

          if (retVal == JFileChooser.APPROVE_OPTION)
          {
            prefs.setImportFileDirectory(fileChooser.getCurrentDirectory().getAbsolutePath());
            jpa.save(prefs, prefs.getId());
            
            File inFile = fileChooser.getSelectedFile();
            if (null != inFile)
            {
              String fileName = inFile.getAbsolutePath();
              
              ImportItemsWorker iiw = 
                 new ImportItemsWorker(fileName, line, store);
              Utils.SWING_WORKER_QUE.offer(iiw);
            }
            else
            {
              LOG.error("The file is null!", 
                inFile != null ? inFile.getAbsolutePath() : this.getClass().getName());
            }
          }
        }
      }
      else
      {
        Utils.showPopMessage(this, "No product lines and/or stores exist!");
      }
    }//GEN-LAST:event_jMenuItemImportInventoryActionPerformed

    private void jMenuItemCreateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreateInvoiceActionPerformed

      if (currUser.isActive() && !jpa.getAllCustomers().isEmpty())
      {
        SelectCustomerJPanel selectCustomer = new SelectCustomerJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selectCustomer,
                            SelectCustomerJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          Customer customer = selectCustomer.getCustomer();
          InvoiceJPanel invoicePanel = new 
                  InvoiceJPanel(null, customer, currUser, tabbedPane);
          tabbedPane.add("Cust#" + customer.getAccountNumber(), invoicePanel);
          tabbedPane.setSelectedComponent(invoicePanel);
        }
      }
      else
      {
        Utils.showPopMessage(this, "Unable to create new invoice.  Did you create customers yet?");
      }
    }//GEN-LAST:event_jMenuItemCreateInvoiceActionPerformed

    private void jMenuItemConfigureCompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConfigureCompanyActionPerformed
      
      Company company = jpa.getCompany();
      if (null == company)
      {
        company = new Company();
      }
      EditCompanyJPanel editCompany = new EditCompanyJPanel(company);
      int answer = JOptionPane.showConfirmDialog(this, editCompany,
                          EditCompanyJPanel.DISPLAY_NAME,
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

      if (answer == JOptionPane.OK_OPTION)
      {
        if (!editCompany.getCompanyName().isEmpty())
        {
          company.setStreetAddress(editCompany.getAddress());
          company.setCity(editCompany.getCity());
          company.setContactEmail(editCompany.getContactEmail());
          company.setContactName(editCompany.getContactName());
          company.setCountry(editCompany.getCountry());
          company.setFaxNumber(editCompany.getFaxNumber());
          company.setCompanyName(editCompany.getCompanyName());
          company.setPhoneNumber(editCompany.getPhoneNumber());
          company.setStateOrProvince(editCompany.getState());
          company.setZipCode(editCompany.getZip());
          company.setListPriceField(editCompany.getListPriceField());
          company.setDefaultSellPriceField(editCompany.getSellPriceField());
          company.setNextInvoiceNumber(editCompany.getNextInvoiceNumber());
          company.setNextPONumber(editCompany.getNextPONumber());
          jpa.save(company, company.getId());
          evaluateMenuControls();
        }
        else
        {
          Utils.showPopMessage(this, "Company name is blank.  Not saved!");
        }
      }
    }//GEN-LAST:event_jMenuItemConfigureCompanyActionPerformed

    private void jMenuItemAddStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddStoreActionPerformed

      Company company = jpa.getCompany();
      if (null != company)
      {
        EditStoreJPanel addStore = new EditStoreJPanel();
        int answer = JOptionPane.showConfirmDialog(this, addStore,
                            EditStoreJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          if (!addStore.getStoreName().isEmpty())
          {
            Store store = new Store();
            store.setCompany(company);
            store.setPostingDate(addStore.getPostingDate());
            store.setPrintDialog(addStore.isPrintDialog());
            store.setTaxCore(addStore.isTaxCore());
            store.setPrintNumInvCopies(addStore.getNumberPrintCopies());
            store.setStreetAddress(addStore.getAddress());
            store.setCity(addStore.getCity());
            store.setManagerEmail(addStore.getManagerEmail());
            store.setManagerName(addStore.getManagerName());
            store.setCountry(addStore.getCountry());
            store.setTaxRate(addStore.getTaxRate());
            store.setFaxNumber(addStore.getFaxNumber());
            store.setStoreName(addStore.getStoreName());
            store.setPhoneNumber(addStore.getPhoneNumber());
            store.setStateOrProvince(addStore.getState());
            store.setTotalSales(addStore.getTotalSales());
            store.setThisYearSales(addStore.getYearToDateSales());
            store.setZipCode(addStore.getZip());
            jpa.save(store, store.getId());
            assignStoreToUsersWithoutStore(store);
            Utils.showPopMessage(this, "Store Saved!");
            evaluateMenuControls();
          }
          else
          {
            Utils.showPopMessage(this, "Store name blank!  Unable to save.");
          }
        }
      }
      else
      {
        Utils.showPopMessage(this, "Please configure your company first!");
      }
    }//GEN-LAST:event_jMenuItemAddStoreActionPerformed

    private void jMenuItemEditStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditStoreActionPerformed

      if (!jpa.getAllStores().isEmpty())
      {
        SelectStoreJPanel selectStore = new SelectStoreJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selectStore,
                            SelectStoreJPanel.TITLE_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          Store store = selectStore.getStore();
          EditStoreJPanel addStore = new EditStoreJPanel(store);
          answer = JOptionPane.showConfirmDialog(this, addStore,
                              EditStoreJPanel.DISPLAY_NAME,
                              JOptionPane.OK_CANCEL_OPTION,
                              JOptionPane.PLAIN_MESSAGE,
                              imanProps.getDialogLogo());

          if (answer == JOptionPane.OK_OPTION)
          {
            if (!addStore.getStoreName().isEmpty())
            {
              store.setPostingDate(addStore.getPostingDate());
              store.setPrintDialog(addStore.isPrintDialog());
              store.setTaxCore(addStore.isTaxCore());
              store.setPrintNumInvCopies(addStore.getNumberPrintCopies());
              store.setStreetAddress(addStore.getAddress());
              store.setCity(addStore.getCity());
              store.setManagerEmail(addStore.getManagerEmail());
              store.setManagerName(addStore.getManagerName());
              store.setCountry(addStore.getCountry());
              store.setTaxRate(addStore.getTaxRate());
              store.setFaxNumber(addStore.getFaxNumber());
              store.setStoreName(addStore.getStoreName());
              store.setPhoneNumber(addStore.getPhoneNumber());
              store.setStateOrProvince(addStore.getState());
              store.setTotalSales(addStore.getTotalSales());
              store.setThisYearSales(addStore.getYearToDateSales());
              store.setZipCode(addStore.getZip());
              jpa.save(store, store.getId());
              assignStoreToUsersWithoutStore(store);
              Utils.showPopMessage(this, "Store Saved!");
            }
            else
            {
              Utils.showPopMessage(this, "Unable to save store!");
            }
          }
        }
      }
      else
      {
        Utils.showPopMessage(this, "No stores exist!");
      }
    }//GEN-LAST:event_jMenuItemEditStoreActionPerformed

    private void jMenuItemSearchItemNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSearchItemNumberActionPerformed

      LookupItemLikeJPanel lookupItem =
                            new LookupItemLikeJPanel();
      int answer = JOptionPane.showConfirmDialog(this, lookupItem,
                          LookupItemLikeStoreJPanel.DISPLAY_NAME,
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

       if (answer == JOptionPane.OK_OPTION)
       {
         LookupItemWorker liw = 
                 new LookupItemWorker(Utils.SEARCH_ITEM_MSG + lookupItem.getItemSearchText(),
                                      SearchType.SEARCH_ITEM_NUMBER,
                                      lookupItem.getItemSearchText(),
                                      lookupItem.getCodes(),
                                      null,
                                      lookupItem.getProductLine(),
                                      currUser, 
                                      tabbedPane, 0);
         try { Utils.SWING_WORKER_QUE.offer(liw); } catch (Exception e) {LOG.error(e.getMessage());}
       }
    }//GEN-LAST:event_jMenuItemSearchItemNumberActionPerformed

    private void jMenuItemConfigureProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConfigureProxyActionPerformed
      
      InetProxy proxy = jpa.getInetProxy();

      if (null != proxy)
      {
        EditProxyJPanel editProxy =
                new EditProxyJPanel(proxy.getProxyIpAddress(),
                                    proxy.getProxyPort(),
                                    proxy.isUseProxy());

        int answer = JOptionPane.showConfirmDialog(this, editProxy,
                            EditProxyJPanel.TITLE_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          proxy.setProxyIpAddress(editProxy.getIPAddress());
          proxy.setUseProxy(editProxy.isUseProxy());
          proxy.setProxyPort(editProxy.getProxyPort());
          jpa.save(proxy, proxy.getId());
        }
      }
    }//GEN-LAST:event_jMenuItemConfigureProxyActionPerformed

    private void jMenuItemSearchItemDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSearchItemDescriptionActionPerformed

      LookupItemLikeJPanel lookupItem =
                            new LookupItemLikeJPanel();
      int answer = JOptionPane.showConfirmDialog(this, lookupItem,
                          LookupItemLikeJPanel.DISPLAY_NAME,
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

       if (answer == JOptionPane.OK_OPTION)
       {
         LookupItemWorker liw = 
                 new LookupItemWorker(Utils.SEARCH_ITEM_DESC + lookupItem.getItemSearchText(),
                                      SearchType.SEARCH_DESCRIPTION,
                                      lookupItem.getItemSearchText(),
                                      lookupItem.getCodes(),
                                      null,
                                      lookupItem.getProductLine(),
                                      currUser, 
                                      tabbedPane, 0);
         Utils.SWING_WORKER_QUE.offer(liw);
       }
    }//GEN-LAST:event_jMenuItemSearchItemDescriptionActionPerformed

    private void jMenuItemCreateNewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreateNewOrderActionPerformed

        SelectProductLineAndStoreJPanel selProdLineStore = new SelectProductLineAndStoreJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selProdLineStore,
                              SelectProductLineAndStoreJPanel.TITLE_NAME,
                              JOptionPane.OK_CANCEL_OPTION,
                              JOptionPane.PLAIN_MESSAGE,
                              imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          NewOrderWorker neworder = 
                  new NewOrderWorker(selProdLineStore.getProductLine(),
                                     selProdLineStore.getStore(),
                                     currUser, tabbedPane);
          Utils.SWING_WORKER_QUE.offer(neworder);
        }

    }//GEN-LAST:event_jMenuItemCreateNewOrderActionPerformed

    private void jMenuItemCreatePurchaseOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreatePurchaseOrderActionPerformed

      SelectVendorAndStoreJPanel selProdVendorStore = new SelectVendorAndStoreJPanel();
      int answer = JOptionPane.showConfirmDialog(this, selProdVendorStore,
                            SelectProductLineAndStoreJPanel.TITLE_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

      if (answer == JOptionPane.OK_OPTION)
      {
        ProductVendor vendor = selProdVendorStore.getProductVendor();
        Store store = selProdVendorStore.getStore();
        
        PurchaseOrderWorker pow = 
                new PurchaseOrderWorker(vendor, store, currUser, tabbedPane);
        
        Utils.SWING_WORKER_QUE.offer(pow);
      }
    }//GEN-LAST:event_jMenuItemCreatePurchaseOrderActionPerformed

    private void jMenuItemUpdatePricesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUpdatePricesActionPerformed

      if (!jpa.getAllProductLines().isEmpty())
      {
        SelectProductLineJPanel selectProdLine = new SelectProductLineJPanel();
        int answer = JOptionPane.showConfirmDialog(this, selectProdLine,
                              SelectProductLineJPanel.TITLE_NAME,
                              JOptionPane.OK_CANCEL_OPTION,
                              JOptionPane.PLAIN_MESSAGE,
                              imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          ProductLine line = selectProdLine.getProductLine();
          JFileChooser fileChooser = new JFileChooser();
          FileNameExtensionFilter extFilter =
                  new FileNameExtensionFilter("CSV Files", "csv", "csv");
          fileChooser.setFileFilter(extFilter);

          int retVal = fileChooser.showOpenDialog(this);

          if (retVal == JFileChooser.APPROVE_OPTION)
          {
            File inFile;
            inFile = fileChooser.getSelectedFile();
            if (null != inFile)
            {
              System.out.println("Updating prices for line: " +
                                      line.getProductLineName());
              String fileName = inFile.getAbsolutePath();
              if(!Utils.updateItemPrices(fileName, line))
              {
                Utils.showPopMessage(this, "The price update failed!");
              }
            }
            else
            {
              LOG.error("The file is null!", fileChooser.getSelectedFile());
            }
          }
        }
      }
      else
      {
        Utils.showPopMessage(this, "No product lines exist!");
      }
    }//GEN-LAST:event_jMenuItemUpdatePricesActionPerformed

    private void jMenuItemDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteItemActionPerformed

      LookupItemLikeJPanel lookupItem = new LookupItemLikeJPanel();
      int answer = JOptionPane.showConfirmDialog(this, lookupItem,
                               LookupItemLikeStoreJPanel.DISPLAY_NAME,
                               JOptionPane.OK_CANCEL_OPTION,
                               JOptionPane.PLAIN_MESSAGE,
                               imanProps.getDialogLogo());

      if (answer == JOptionPane.OK_OPTION)
      {
        List<Item> items = jpa.getItemsLike(lookupItem.getItemSearchText(),
                                            lookupItem.getProductLine(),
                                            lookupItem.getCodes(), null, null, 
                                            SearchType.SEARCH_ITEM_NUMBER);
        if (!items.isEmpty())
        {
          SearchItemDeleteListJPanel searchResults =
                                     new SearchItemDeleteListJPanel(items);
          JOptionPane.showConfirmDialog(this, searchResults,
                               SearchItemDeleteListJPanel.TITLE_NAME,
                               JOptionPane.CLOSED_OPTION,
                               JOptionPane.PLAIN_MESSAGE,
                               imanProps.getDialogLogo());
        }
        else
        {
          Utils.showPopMessage(this, "No items found!");
        }
      }
    }//GEN-LAST:event_jMenuItemDeleteItemActionPerformed

    private void jMenuItemAddMarketSegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddMarketSegmentActionPerformed

      EditMarketSegmentJPanel addSegment = new EditMarketSegmentJPanel();
      int answer = JOptionPane.showConfirmDialog(this, addSegment,
                          EditMarketSegmentJPanel.DISPLAY_NAME,
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

      if (answer == JOptionPane.OK_OPTION)
      {
        if (!addSegment.getSegmentName().isEmpty() 
            && null == jpa.getMarketSegment(addSegment.getSegmentName()))
        {
          MarketSegment newSegment = new MarketSegment(addSegment.getSegmentName());
          newSegment.setSegmentSize(addSegment.getSegmentSize());
          newSegment.setDescription(addSegment.getSegmentDescription());
          jpa.save(newSegment, newSegment.getId());
          Utils.showPopMessage(this, "Market segment created!");
        }
        else
        {
          Utils.showPopMessage(this, "Market segment already exists!");
        }
      }
    }//GEN-LAST:event_jMenuItemAddMarketSegmentActionPerformed

    private void jMenuItemEditMarketSegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditMarketSegmentActionPerformed

      List segments = jpa.getAllMarketSegments();
      if (!segments.isEmpty())
      {
        SelectObjectJPanel selectSegment = new SelectObjectJPanel(segments, null);
        int answer = JOptionPane.showConfirmDialog(this, selectSegment,
                            SelectUnitMeasureJPanel.DISPLAY_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

        if (answer == JOptionPane.OK_OPTION)
        {
          MarketSegment seg = (MarketSegment)selectSegment.getSelctedObject();
          
          EditMarketSegmentJPanel editSegment = new EditMarketSegmentJPanel(seg);

          answer = JOptionPane.showConfirmDialog(this, editSegment,
                           EditUnitOfMeasureJPanel.DISPLAY_NAME,
                           JOptionPane.OK_CANCEL_OPTION,
                           JOptionPane.PLAIN_MESSAGE,
                           imanProps.getDialogLogo());

          if (answer == JOptionPane.OK_OPTION)
          {
            if (!editSegment.getSegmentName().isEmpty())
            {
              seg.setName(editSegment.getSegmentName());
              seg.setDescription(editSegment.getSegmentDescription());
              seg.setSegmentSize(editSegment.getSegmentSize());
              jpa.save(seg, seg.getId());
            }
            else
            {
              Utils.showPopMessage(this, "Market segment name is blank!");
            }
          }
        }
      }
      else
      {
        Utils.showPopMessage(this, "No market segments exist!");
      }
    }//GEN-LAST:event_jMenuItemEditMarketSegmentActionPerformed

    private void jMenuItemNewOrderLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewOrderLinesActionPerformed

      NewOrderChartWorker nocw = new NewOrderChartWorker(tabbedPane);
      Utils.SWING_WORKER_QUE.offer(nocw);
    }//GEN-LAST:event_jMenuItemNewOrderLinesActionPerformed

    private void jMenuItemSearchOEMNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSearchOEMNumberActionPerformed
      LookupItemJPanel lookupItem =
                            new LookupItemJPanel("Enter OEM Item Number");
      int answer = JOptionPane.showConfirmDialog(this, lookupItem,
                          LookupItemJPanel.DISPLAY_TITLE,
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

       if (answer == JOptionPane.OK_OPTION)
       {
         LookupItemWorker liw = 
                 new LookupItemWorker(Utils.SEARCH_ITEM_OEM + lookupItem.getItemNumber(),
                                      SearchType.SEARCH_OEM,
                                      lookupItem.getItemNumber(),
                                      null,
                                      null,
                                      null,
                                      currUser, 
                                      tabbedPane, 0);
         Utils.SWING_WORKER_QUE.offer(liw);
       }
    }//GEN-LAST:event_jMenuItemSearchOEMNumberActionPerformed

  private void jMenuItemRecallInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRecallInvoiceActionPerformed
      
      List<Invoice> invList = jpa.getAllInvoices();
      if (!invList.isEmpty())
      {
         SelectObjectJPanel selectInvItem =
                              new SelectObjectJPanel(jpa.getAllInvoices(), 
                                                     InvoiceState.getToolTip());
         int answer = JOptionPane.showConfirmDialog(this, selectInvItem,
                            Utils.DISPLAY_INVOICE_RECALL,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

         if (answer == JOptionPane.OK_OPTION)
         {
            Invoice i = (Invoice)selectInvItem.getSelctedObject();
            InvoiceJPanel invoicePanel = new 
                          InvoiceJPanel(i, null, currUser, tabbedPane);
            tabbedPane.add("Inv# " + i.getId(), invoicePanel);
            tabbedPane.setSelectedComponent(invoicePanel);
         }
      }
      else
      {
        Utils.showPopMessage(this, "No invoices found.");
      }       
  }//GEN-LAST:event_jMenuItemRecallInvoiceActionPerformed

   private void jMenuItemInventoryLostSalesChartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemInventoryLostSalesChartActionPerformed
   {//GEN-HEADEREND:event_jMenuItemInventoryLostSalesChartActionPerformed
     SelectVendorAndStoreJPanel selProdVendorStore = new SelectVendorAndStoreJPanel();
     int answer = JOptionPane.showConfirmDialog(this, selProdVendorStore,
                            SelectProductLineAndStoreJPanel.TITLE_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE, null);

     if (answer == JOptionPane.OK_OPTION)
     {
       ProductVendor vendor = selProdVendorStore.getProductVendor();
       Store store = selProdVendorStore.getStore();

       InventoryLostSalesChartWorker worker = 
               new InventoryLostSalesChartWorker(tabbedPane, vendor, store);
       Utils.SWING_WORKER_QUE.offer(worker);
     }    
   }//GEN-LAST:event_jMenuItemInventoryLostSalesChartActionPerformed

   private void jMenuPrintPOActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuPrintPOActionPerformed
   {//GEN-HEADEREND:event_jMenuPrintPOActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_jMenuPrintPOActionPerformed

  private void jMenuItemDeleteItemsLikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteItemsLikeActionPerformed
      LookupItemLikeJPanel lookupItem =
                            new LookupItemLikeJPanel();
      int answer = JOptionPane.showConfirmDialog(this, lookupItem,
                          "Bulk Delete Items",
                          JOptionPane.OK_CANCEL_OPTION,
                          JOptionPane.PLAIN_MESSAGE,
                          imanProps.getDialogLogo());

       if (answer == JOptionPane.OK_OPTION && !lookupItem.getItemSearchText().isEmpty())
       {
         DeleteItemsWorker diw = 
                 new DeleteItemsWorker(Utils.SEARCH_ITEM_MSG + lookupItem.getItemSearchText(),
                                      lookupItem.getItemSearchText(),
                                      lookupItem.getProductLine());
         Utils.SWING_WORKER_QUE.offer(diw);
       }
  }//GEN-LAST:event_jMenuItemDeleteItemsLikeActionPerformed

  private void jMenuCancelPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCancelPOActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jMenuCancelPOActionPerformed

  private void jMenuItemReceivePOManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReceivePOManualActionPerformed
      SelectVendorAndPurchaseOrder selVendorPo = new SelectVendorAndPurchaseOrder(currUser.getStore());
      int answer = JOptionPane.showConfirmDialog(this, selVendorPo,
                            SelectVendorAndPurchaseOrder.TITLE_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            imanProps.getDialogLogo());

      if (answer == JOptionPane.OK_OPTION)
      {
        PurchaseOrder po = selVendorPo.getPurchaseOrder();
        
        PurchaseOrderTableJPanel poTable = 
                new PurchaseOrderTableJPanel(currUser, po, tabbedPane);
    
        tabbedPane.add(PurchaseOrderTableJPanel.DISPLAY_NAME + " - " + po.getId(), poTable);
        tabbedPane.setSelectedComponent(poTable);
      }
    
  }//GEN-LAST:event_jMenuItemReceivePOManualActionPerformed

  private void jMenuItemInventoryBackorderedChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInventoryBackorderedChartActionPerformed
 
    SelectProductVendorJPanel selectProdVendor = new SelectProductVendorJPanel();
    int answer = JOptionPane.showConfirmDialog(this, selectProdVendor,
                        SelectProductVendorJPanel.TITLE_NAME,
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.PLAIN_MESSAGE, null);

    if (answer == JOptionPane.OK_OPTION)
    {
      ProductVendor vendor = selectProdVendor.getProductVendor();
      BackOrderChartWorker worker = new BackOrderChartWorker(tabbedPane, vendor);
      Utils.SWING_WORKER_QUE.offer(worker);
    }
  }//GEN-LAST:event_jMenuItemInventoryBackorderedChartActionPerformed

  private void jMenuItemInventoryOnOrderChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInventoryOnOrderChartActionPerformed

     SelectVendorAndStoreJPanel selProdVendorStore = new SelectVendorAndStoreJPanel();
     int answer = JOptionPane.showConfirmDialog(this, selProdVendorStore,
                            SelectProductLineAndStoreJPanel.TITLE_NAME,
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE, null);

     if (answer == JOptionPane.OK_OPTION)
     {
       ProductVendor vendor = selProdVendorStore.getProductVendor();
       Store store = selProdVendorStore.getStore();

       OnOrderChartWorker worker = new OnOrderChartWorker(tabbedPane, vendor, store);
       Utils.SWING_WORKER_QUE.offer(worker);
     }     
  }//GEN-LAST:event_jMenuItemInventoryOnOrderChartActionPerformed

  /**
  * @param args the command line arguments
  */
  public static void main(String args[])
  {
     // This default look and feel will run on all systems.
     lookFeel = "com.sun.java.swing.plaf.motif.MotifLookAndFeel";

     if (args.length > 0)
     {
       if (args[0].equalsIgnoreCase("nimbus"))
       {
         lookFeel = "javax.swing.plaf.nimbus.NimbusLookAndFeel";
       }
       else
       if (args[0].equalsIgnoreCase("motif"))
       {
         lookFeel = "com.sun.java.swing.plaf.motif.MotifLookAndFeel";
       }
       else
       if (args[0].equalsIgnoreCase("gtk"))
       {
         lookFeel = "com.sun.java.swing.plaf.gtk.GTKLookAndFeel";
       }
       else
       if (args[0].equalsIgnoreCase("windows"))
       {
         lookFeel = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
       }
     }

     java.awt.EventQueue.invokeLater(new Runnable()
     {
        @Override
        public void run()
        {
           try
           {
              //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
              UIManager.setLookAndFeel(lookFeel);
           }
           catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e)
           {
              System.err.println(e.getMessage());
           }
           new InvManagerMainFrame().setVisible(true);
        }
     });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private static final javax.swing.JLabel jLabelBusyWaitAnimation = new javax.swing.JLabel();
  private static javax.swing.JLabel jLabelWorking;
  private javax.swing.JMenu jMenuAdmin;
  private javax.swing.JMenu jMenuApp;
  private javax.swing.JMenu jMenuAssociate;
  private javax.swing.JMenuBar jMenuBarMain;
  private javax.swing.JMenu jMenuBin;
  private javax.swing.JMenuItem jMenuCancelPO;
  private javax.swing.JMenu jMenuCharts;
  private javax.swing.JMenu jMenuCreatePO;
  private javax.swing.JMenu jMenuCustomer;
  private javax.swing.JMenu jMenuHelp;
  private javax.swing.JMenu jMenuInvManagement;
  private javax.swing.JMenu jMenuInventoryCharts;
  private javax.swing.JMenu jMenuInvoice;
  private javax.swing.JMenu jMenuItem;
  private javax.swing.JMenuItem jMenuItemAbout;
  private javax.swing.JMenuItem jMenuItemAddAssociate;
  private javax.swing.JMenuItem jMenuItemAddBinLocation;
  private javax.swing.JMenuItem jMenuItemAddCustomer;
  private javax.swing.JMenuItem jMenuItemAddMarketSegment;
  private javax.swing.JMenuItem jMenuItemAddProductLine;
  private javax.swing.JMenuItem jMenuItemAddStore;
  private javax.swing.JMenuItem jMenuItemAddUnitOfMeasure;
  private javax.swing.JMenuItem jMenuItemAddVendor;
  private javax.swing.JMenuItem jMenuItemConfigureCompany;
  private javax.swing.JMenuItem jMenuItemConfigureProxy;
  private javax.swing.JMenuItem jMenuItemCreateInvoice;
  private javax.swing.JMenuItem jMenuItemCreateNewOrder;
  private javax.swing.JMenuItem jMenuItemCreatePurchaseOrder;
  private javax.swing.JMenuItem jMenuItemDeleteItem;
  private javax.swing.JMenuItem jMenuItemDeleteItemsLike;
  private javax.swing.JMenuItem jMenuItemEditAssociate;
  private javax.swing.JMenuItem jMenuItemEditBinLocation;
  private javax.swing.JMenuItem jMenuItemEditCustomer;
  private javax.swing.JMenuItem jMenuItemEditMarketSegment;
  private javax.swing.JMenuItem jMenuItemEditProductLine;
  private javax.swing.JMenuItem jMenuItemEditStore;
  private javax.swing.JMenuItem jMenuItemEditUnitOfMeasure;
  private javax.swing.JMenuItem jMenuItemEditVendor;
  private javax.swing.JMenuItem jMenuItemExit;
  private javax.swing.JMenuItem jMenuItemImportInventory;
  private javax.swing.JMenuItem jMenuItemInventoryBackorderedChart;
  private javax.swing.JMenuItem jMenuItemInventoryLostSalesChart;
  private javax.swing.JMenuItem jMenuItemInventoryOnOrderChart;
  private javax.swing.JMenuItem jMenuItemLogin;
  private javax.swing.JMenuItem jMenuItemLogout;
  private javax.swing.JMenuItem jMenuItemLookupItem;
  private javax.swing.JMenuItem jMenuItemNewItem;
  private javax.swing.JMenuItem jMenuItemNewOrderLines;
  private javax.swing.JMenuItem jMenuItemRecallInvoice;
  private javax.swing.JMenuItem jMenuItemReceiveOnAccount;
  private javax.swing.JMenuItem jMenuItemReceivePOAutomatic;
  private javax.swing.JMenuItem jMenuItemReceivePOManual;
  private javax.swing.JMenuItem jMenuItemSearchItemDescription;
  private javax.swing.JMenuItem jMenuItemSearchItemNumber;
  private javax.swing.JMenuItem jMenuItemSearchOEMNumber;
  private javax.swing.JMenuItem jMenuItemSelectItem;
  private javax.swing.JMenuItem jMenuItemUpdatePrices;
  private javax.swing.JMenuItem jMenuPrintPO;
  private javax.swing.JMenu jMenuProductLine;
  private javax.swing.JMenu jMenuPurchaseOrder;
  private javax.swing.JMenu jMenuPurchaseOrderCharts;
  private javax.swing.JMenu jMenuReceivePO;
  private javax.swing.JMenu jMenuReports;
  private javax.swing.JMenu jMenuStore;
  private javax.swing.JMenu jMenuUnitMeasure;
  private javax.swing.JMenu jMenuVendor;
  private javax.swing.JPanel jPanelStatusBar;
  private static javax.swing.JProgressBar jProgressBarMain;
  private javax.swing.JScrollPane jScrollPaneMain;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JPopupMenu.Separator jSeparator10;
  private javax.swing.JPopupMenu.Separator jSeparator11;
  private javax.swing.JPopupMenu.Separator jSeparator12;
  private javax.swing.JPopupMenu.Separator jSeparator2;
  private javax.swing.JPopupMenu.Separator jSeparator3;
  private javax.swing.JPopupMenu.Separator jSeparator4;
  private javax.swing.JPopupMenu.Separator jSeparator5;
  private javax.swing.JPopupMenu.Separator jSeparator6;
  private javax.swing.JPopupMenu.Separator jSeparator7;
  private javax.swing.JPopupMenu.Separator jSeparator8;
  private javax.swing.JPopupMenu.Separator jSeparator9;
  private javax.swing.JTabbedPane jTabbedPaneMain;
  // End of variables declaration//GEN-END:variables

  private void loggedin(Associate user)
  {
    if (null != user)
    {
      if (user.isActive())
      {
        this.currUser = user;
         
         // If the user is a member of the admin group, enable admin menu.
         if (user.getUsergroup() == UserGroup.ADMIN)
         {
           jMenuAdmin.setEnabled(true);
         }

         // If the user is a member of the admin or management group,
         // enable the purchasing menu.
         if (user.getUsergroup() == UserGroup.ADMIN
             || user.getUsergroup() == UserGroup.MANAGEMENT)
         {
           jMenuItemNewItem.setEnabled(true);
           if (!jpa.getAllProductLines().isEmpty()
                && null != jpa.getCompany()
                && !jpa.getAllProductVendors().isEmpty())
           {
             jMenuPurchaseOrder.setEnabled(true);
             jMenuPurchaseOrder.setEnabled(!Utils.isDevelopmentRelease);
           }
           
           // TODO: figure out if the criteria for reports and charts
           // menus to be displayed.
           jMenuReports.setEnabled(true);
           jMenuCharts.setEnabled(true);
         }
         else
         {
           jMenuReports.setEnabled(false);
           jMenuItemNewItem.setEnabled(false);
         }
         
         // If product lines, stores, and items defined, enable the Item menu.         
         if (!jpa.getAllProductLines().isEmpty() 
             && !jpa.getAllStores().isEmpty()
             && null != jpa.getFirstItem())
         {
           jMenuItem.setEnabled(true);
         }
         
         if (!jpa.getAllCustomers().isEmpty() 
              && !jpa.getAllStores().isEmpty()
              && null != jpa.getCompany())
         {
           jMenuInvoice.setEnabled(true);
         }

         mainSplash.setLoggedIn(user, tabbedPane);
         jMenuItemLogin.setEnabled(false);
         jMenuItemLogout.setEnabled(true);         

       }
       else
       {
         loggedout();
       }
       evaluateMenuControls();
    }
  }

  private void loggedout()
  {
    jMenuAdmin.setEnabled(false);
    jMenuPurchaseOrder.setEnabled(false);
    jMenuItemLogin.setEnabled(true);
    jMenuItemLogout.setEnabled(false);
    
    jMenuItem.setEnabled(false);
    jMenuInvoice.setEnabled(false);
    jMenuCharts.setEnabled(false);
    jMenuReports.setEnabled(false);
    this.currUser = null;
    mainSplash.setLoggedOut();
    tabbedPane.removeAll();
    tabbedPane.add(WELCOME_TAB, mainSplash);
  }
  
  public void evaluateMenuControls()
  {
    if (null != this.currUser)
    {
      // If the user is a member of the admin group, enable admin menu.
      jMenuAdmin.setEnabled(currUser.getUsergroup() == UserGroup.ADMIN);

      // TODO: control this with RBAC.
      jMenuPurchaseOrder.setEnabled(currUser.getUsergroup() == UserGroup.ADMIN ||
                                    currUser.getUsergroup() == UserGroup.MANAGEMENT);
      jMenuCharts.setEnabled(true);

      jMenuReports.setEnabled(currUser.getUsergroup() == UserGroup.ADMIN ||
                                    currUser.getUsergroup() == UserGroup.MANAGEMENT);

      jMenuInvoice.setEnabled(jpa.getCustomerCount() > 0 && jpa.getItemCount() > 0);

      jMenuReceivePO.setEnabled(jpa.getPurchaseOrderCount() > 0);

      jMenuItem.setEnabled(jpa.getItemCount() > 0);

      jMenuItemNewItem.setEnabled(currUser.getUsergroup() == UserGroup.ADMIN ||
                                  currUser.getUsergroup() == UserGroup.MANAGEMENT);

      jMenuPurchaseOrderCharts.setEnabled(jpa.getPurchaseOrderCount() > 0 &&
                                         (currUser.getUsergroup() == UserGroup.ADMIN ||
                                          currUser.getUsergroup() == UserGroup.MANAGEMENT));

      jMenuInventoryCharts.setEnabled(jpa.getItemCount() > 0);

      jMenuPurchaseOrder.setEnabled(jpa.getProductLineCount() > 0 &&
                                    jpa.getVendorCount() > 0 &&
                                    jpa.getStoreCount() > 0 &&
                                    (currUser.getUsergroup() == UserGroup.ADMIN ||
                                     currUser.getUsergroup() == UserGroup.MANAGEMENT));

      jMenuCancelPO.setEnabled(jpa.getPurchaseOrderCount() > 0 &&
                               (currUser.getUsergroup() == UserGroup.ADMIN ||
                                currUser.getUsergroup() == UserGroup.MANAGEMENT));

      jMenuPrintPO.setEnabled(jpa.getPurchaseOrderCount() > 0 &&
                              (currUser.getUsergroup() == UserGroup.ADMIN ||
                               currUser.getUsergroup() == UserGroup.MANAGEMENT));
    }   
  }
  
  private void saveEditedUser(final AddUserJPanel editUser, 
                              final Associate user, 
                              final boolean isNewUser)
  {
    boolean saveAssociate = true;
    boolean encryptPassword = true;
    
    user.setLoginName(editUser.getLoginName());
    user.setFirstName(editUser.getFirstName());
    user.setLastName(editUser.getLastName());           
    user.setActive(editUser.isActive());
    user.setEmailaddress(editUser.getEmailAddress());
    user.setSendemail(editUser.isSendEmail());
    user.setChangeSellPrice(editUser.isChangeSellPrice());
    user.setRestrictStoreChange(editUser.isRestrictStore());
    user.setPrintDialog(editUser.isPrintDialog());
    user.setOrganization(editUser.getOrganization());
    user.setUsergroup(editUser.getUserGroup());
    user.setPhonenumber(editUser.getPhoneNumber());
    user.setStore(editUser.getStoreLocation());

    // If the password field is empty, then abort the operation.
    if (isNewUser && editUser.getPassword().isEmpty())
    {
      Utils.showPopMessage(this, "No password!  Cancelled.");
      saveAssociate = false;
    }
    
    
    if (saveAssociate && editUser.getPassword().compareTo(editUser.getPasswordCheck()) != 0)
    {
      Utils.showPopMessage(this, "Passwords do not match, cancelled.");
      saveAssociate = false;
    }
    
    // If we have an existing user, and they didn't change their
    // password, then we don't want to reencrypt their existing password!
    if (!isNewUser && editUser.getPassword().isEmpty())
    {
      encryptPassword = false;
    }    

    if (saveAssociate)
    {
      if (encryptPassword)
      {
        user.setPassword(Crypt.encrypt(null, editUser.getPassword()));
      }
             
      jpa.save(user, user.getId());
    }
  }
  
 /**
  * Makes the busy progress bar either visible or hidden.
  * @param working - true makes status bar come alive, false hides.
  * @param msg - message to display in the status bar.
  */
 public static synchronized void setWorkingStatus(final boolean working, final String msg)
 {
    if (working)
    {
      
      if (null != msg)
      {
        jLabelWorking.setText(msg);
      }       
      else
      {
        // Set the label back to the default.
        jLabelWorking.setText(Utils.STATUS_BAR_MSG);
      }
    }
    
    jLabelWorking.setVisible(working);
 }
 
 /**
  * Sets the spinner GIF to visible or not.  true = visible.
  * @param working - true makes status bar come alive, false hides.
  */
  public static synchronized void setBusySpinner(final boolean working)
  {
    jLabelBusyWaitAnimation.setVisible(working);
  } 
 
  /**
   * Makes the busy progress bar either visible or hidden.
   * @param isVisible - true makes progress bar visible, false hides.
   * @param value - the current value of the progress bar.
   */
  public static synchronized void setProgressBar(final boolean isVisible, final int value)
  {
     jProgressBarMain.setVisible(isVisible);
     jProgressBarMain.setValue(value);
  } 

  /**
   * Returns the busy progress bar object.
   * @return JProgressBar
   */
  public static synchronized JProgressBar getProgressBar()
  {
     return jProgressBarMain;
  } 
  
  /**
   * Shows a pop-up message center in the middle of the tabbed pane.
   * @param msg - message to display in the status bar.
   */
  public static void showPopupMessage(final String msg)
  {
    if (null != msg)
    {
       Utils.showPopMessage(tabbedPane, msg);
    }
  } 

  /**
   * This method is used to assign a store to users that might not
   * currently have a store.  Mainly, when the system is initialized, and
   * the admin user is created, this user will not have a store assigned to
   * it because no stores exist yet.  After the first store is added, all users
   * will be assigned to that store automatically to avoid having an user not
   * belonging to a store.
   * @param store - The store to assign to all users without a store assigned.
   */
  private void assignStoreToUsersWithoutStore(final Store store)
  {
    if (null != store)
    {
       List<Associate> users = jpa.getAllAssociates();
       for (Associate user : users)
       {
         if (null == user.getStore())
         {
           user.setStore(store);
           jpa.save(user, user.getId());
         }
       }
    }
  }
 
 // Need to put this login worker here so that it has access
 // to the loggedIn method.  That method sets multiple swing controls
 // to enabled, etc.
 public class LoginWorker
        extends SwingWorker<Integer, String>
 {
    private final String userName;
    private final String password;

    public LoginWorker(final String userName, 
                       final String password)
    {
      this.userName = userName;
      this.password = password;
      loggedout();
    }
   
    @Override
    protected void process(List<String> chunks)
    {
      for (String s : chunks)
      {
         InvManagerMainFrame.setWorkingStatus(true, s);
      }
    }
    
    @Override
    protected Integer doInBackground() throws Exception
    {
      InvManagerMainFrame.setWorkingStatus(true, "Logging in, please wait...");
      InvManagerMainFrame.setBusySpinner(true);
      
       // Check to see if this is the first time running.  If so then
       // setup a new admin user.
       HibernateDataManagerDyn jpa = new HibernateDataManagerDyn();
       
       // If this is the first time runnung the program, create the
       // admin account first.
       if (jpa.getAllAssociates().isEmpty())
       {
         Associate adminUser = new Associate();
         adminUser.setLoginName(Utils.ADMIN_NAME);
         adminUser.setActive(true);
         adminUser.setUsergroup(UserGroup.ADMIN);
         adminUser.setFirstName("Administrator");
         adminUser.setLastName("Associate");
         adminUser.setPassword(Crypt.encrypt(null, Utils.ADMIN_PWD));
         jpa.save(adminUser, adminUser.getId());
       }
       
       Associate loginUser = jpa.getLogin(this.userName, this.password);
       if (null != loginUser)
       {
         loggedin(loginUser);
         InvManagerMainFrame.setWorkingStatus(false, null);
       }
       else
       {
         InvManagerMainFrame.setWorkingStatus(true, "Invalid Login!");
         InvManagerMainFrame.setBusySpinner(false);
       }

       return 1;
    }
  }  
             
  /**
   * This class is a blocking queue to handle the various swing workers
   * in a FIFO manner.  This is because they all share a comment status
   * bar and progress bar.  This task will make sure one swing worker
   * is complete before another worker can run.  This takes case or
   * mutual exclusion of the status and progress status items.
   */
  private class SwingWorkerConsumer 
                  implements Runnable
  {
    SwingWorker sw = null;

    @Override
    public void run()
    {
      while (true)
      { 
        try 
        {
          // If out swing worker is null, then it's time for us to block
          // until another worker is ready to execute.
          if (null == sw)
          {
            sw = Utils.SWING_WORKER_QUE.take();
          }
          else
          {
            // If the worker is new, then execute it.
            if (sw.getState().compareTo(SwingWorker.StateValue.PENDING) == 0)
            {
              sw.execute();
            }
            else
            if (sw.isDone())
            {
              // Since the worker is done executing, see if there is another
              // swing worker, else just block.
              sw = null;
              evaluateMenuControls();
            }
          }            
        } 
        catch (InterruptedException ex)
        {
          LOG.error(ex.getMessage());
        }
      }
    }
  }

}

