/*
 * Copyright (c) 2011, Fritz Feuerbacher.
 */
package com.feuersoft.imanager.ui;

import com.feuersoft.imanager.persistence.EmailConfig;
import javax.swing.DefaultListModel;
import javax.swing.SpinnerNumberModel;

/**
 * @author Fritz Feuerbacher
 */
public class EmailConfigureJPanel extends javax.swing.JPanel {

    public static final String DISPLAY_NAME = "Edit Email Configuration";
    private EmailConfig emailCfg = null;
    
    /** Creates new form EmailConfigureJPanel */
    protected EmailConfigureJPanel() {
        initComponents();
    }

    public EmailConfigureJPanel(EmailConfig emailCfg)
    {
      this();
      this.emailCfg = emailCfg;
      jCheckBoxServerRequiresAuthentication.setSelected(emailCfg.isServerRequiresAuth());
      jTextFieldEmailServerLoginName.setEnabled(jCheckBoxServerRequiresAuthentication.isSelected());
      jPasswordFieldMailServerLoginPassword.setEnabled(jCheckBoxServerRequiresAuthentication.isSelected());
      jCheckBoxUseSubject.setSelected(emailCfg.isUseSubject());
      jTextFieldEmailSubject.setEnabled(jCheckBoxUseSubject.isSelected());
      jTextFieldEmailSubject.setText(emailCfg.getSubject());

      jPasswordFieldMailServerLoginPassword.setText(emailCfg.getLoginPassword());
      jTextFieldEmailServerLoginName.setText(emailCfg.getLoginName());
      jSpinnerSmtpPort.setValue(emailCfg.getServerPort());
      jTextFieldEmailServerHost.setText(emailCfg.getServerHost());
      jTextFieldFromAddress.setText(emailCfg.getFromAddress());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jTextFieldFromAddress = new javax.swing.JTextField();
      jTextFieldEmailSubject = new javax.swing.JTextField();
      jCheckBoxUseSubject = new javax.swing.JCheckBox();
      jTextFieldEmailServerHost = new javax.swing.JTextField();
      jTextFieldEmailServerLoginName = new javax.swing.JTextField();
      jCheckBoxServerRequiresAuthentication = new javax.swing.JCheckBox();
      jSpinnerSmtpPort = new javax.swing.JSpinner();
      jPasswordFieldMailServerLoginPassword = new javax.swing.JPasswordField();
      jLabel2 = new javax.swing.JLabel();

      jTextFieldFromAddress.setBorder(javax.swing.BorderFactory.createTitledBorder("FROM: Address"));

      jTextFieldEmailSubject.setBorder(javax.swing.BorderFactory.createTitledBorder("Subject"));

      jCheckBoxUseSubject.setText("Use Subject");
      jCheckBoxUseSubject.setToolTipText("If you do not use the subject, the DTG will be used instead.");
      jCheckBoxUseSubject.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBoxUseSubjectActionPerformed(evt);
         }
      });

      jTextFieldEmailServerHost.setBorder(javax.swing.BorderFactory.createTitledBorder("Mail Server Host"));

      jTextFieldEmailServerLoginName.setBorder(javax.swing.BorderFactory.createTitledBorder("Mail Server Login Name"));

      jCheckBoxServerRequiresAuthentication.setText("Server Requires Authentication");
      jCheckBoxServerRequiresAuthentication.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBoxServerRequiresAuthenticationActionPerformed(evt);
         }
      });

      jSpinnerSmtpPort.setModel(new javax.swing.SpinnerNumberModel(25, 1, null, 1));

      jPasswordFieldMailServerLoginPassword.setBorder(javax.swing.BorderFactory.createTitledBorder("Mail Server Login Password"));

      jLabel2.setText("SMTP Port");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jCheckBoxUseSubject)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                  .addComponent(jTextFieldFromAddress, javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jTextFieldEmailSubject, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                  .addComponent(jTextFieldEmailServerHost, javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextFieldEmailServerLoginName, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                           .addComponent(jLabel2)
                           .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                           .addComponent(jSpinnerSmtpPort, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                     .addGap(18, 18, 18)
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxServerRequiresAuthentication)
                        .addComponent(jPasswordFieldMailServerLoginPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addContainerGap(19, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(24, 24, 24)
            .addComponent(jTextFieldFromAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jTextFieldEmailSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jCheckBoxUseSubject)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTextFieldEmailServerHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jTextFieldEmailServerLoginName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jPasswordFieldMailServerLoginPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(jSpinnerSmtpPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jCheckBoxServerRequiresAuthentication))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxUseSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseSubjectActionPerformed
      jTextFieldEmailSubject.setEnabled(jCheckBoxUseSubject.isSelected());
}//GEN-LAST:event_jCheckBoxUseSubjectActionPerformed

    private void jCheckBoxServerRequiresAuthenticationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxServerRequiresAuthenticationActionPerformed
      jTextFieldEmailServerLoginName.setEnabled(jCheckBoxServerRequiresAuthentication.isSelected());
      jPasswordFieldMailServerLoginPassword.setEnabled(jCheckBoxServerRequiresAuthentication.isSelected());        // TODO add your handling code here:
}//GEN-LAST:event_jCheckBoxServerRequiresAuthenticationActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBox jCheckBoxServerRequiresAuthentication;
   private javax.swing.JCheckBox jCheckBoxUseSubject;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JPasswordField jPasswordFieldMailServerLoginPassword;
   private javax.swing.JSpinner jSpinnerSmtpPort;
   private javax.swing.JTextField jTextFieldEmailServerHost;
   private javax.swing.JTextField jTextFieldEmailServerLoginName;
   private javax.swing.JTextField jTextFieldEmailSubject;
   private javax.swing.JTextField jTextFieldFromAddress;
   // End of variables declaration//GEN-END:variables

  private boolean removeSelectedItems(javax.swing.JList listBox)
  {
    boolean removed = true;
    if (!listBox.isSelectionEmpty())
    {
      for (Object o : listBox.getSelectedValues())
      {
        ((DefaultListModel)listBox.getModel()).removeElement(o);
      }
    }
    else
    {
      removed = false;
    }
    return removed;
  }

  public EmailConfig getEmailCfg()
  {
    emailCfg.setServerRequiresAuth(jCheckBoxServerRequiresAuthentication.isSelected());
    char[] pwd = jPasswordFieldMailServerLoginPassword.getPassword();
    emailCfg.setLoginPassword(String.copyValueOf(pwd));
    emailCfg.setLoginName(jTextFieldEmailServerLoginName.getText());
    emailCfg.setServerPort(((SpinnerNumberModel)jSpinnerSmtpPort.getModel())
                                                    .getNumber().intValue());
    emailCfg.setServerHost(jTextFieldEmailServerHost.getText());
    emailCfg.setFromAddress(jTextFieldFromAddress.getText());
    emailCfg.setSubject(jTextFieldEmailSubject.getText());
    emailCfg.setUseSubject(jCheckBoxUseSubject.isSelected());

    return emailCfg;
  }
}
